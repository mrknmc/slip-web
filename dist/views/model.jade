doctype html
html
  head
    meta(charset='utf-8')
    script(src='//cdnjs.cloudflare.com/ajax/libs/three.js/r69/three.js')
  body
    script.
      var camera, scene, renderer;

      init();
      animate();

      function init() {
        camera = new THREE.OrthographicCamera(window.innerWidth / - 2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / - 2, -500, 1000);
        camera.position.x = 200;
        camera.position.y = 100;
        camera.position.z = 100;

        var sphere = new THREE.SphereGeometry(200, 8, 4, 0, Math.PI * 2, 0, Math.PI / 2);
        //- var material = new THREE.MeshNormalMaterial();
        var material = new THREE.MeshBasicMaterial({
          color: 0xff0000,
          vertexColors: THREE.FaceColors,
          shading: THREE.FlatShading,
          overdraw: true,
          wireframe: false,
          transparent: false,
        });

        sphereMesh = new THREE.Mesh(sphere, material);

        sphereMesh.dynamic = true;
        sphereMesh.needsUpdate = true;

        var f;
        for (var i = 0; i < sphere.faces.length; i++) {
            f = sphere.faces[i];
            f.color.setRGB(Math.random(), Math.random(), Math.random());
        }

        scene = new THREE.Scene();
        scene.add(sphereMesh);

        renderer = new THREE.WebGLRenderer();
        renderer.setClearColor(0xf0f0f0);
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);
        window.addEventListener('resize', onWindowResize, false);
      }

      function onWindowResize() {
        camera.left = window.innerWidth / - 2;
        camera.right = window.innerWidth / 2;
        camera.top = window.innerHeight / 2;
        camera.bottom = window.innerHeight / - 2;

        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
      }

      function animate() {
        requestAnimationFrame(animate);
        render();
      }

      function render() {
        var timer = Date.now() * 0.0002;
        camera.position.x = Math.cos(timer) * 100;
        camera.position.z = Math.sin(timer) * 100;
        camera.lookAt(scene.position);
        renderer.render(scene, camera);
      }
